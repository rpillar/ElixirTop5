<style>
</style>

<%= render "navbar.html", conn: @conn %>

<div class="row" style="margin-bottom: 0px;">
    <div class="col s8 offset-s1">
        <div>
            <h3><span style="border-bottom:2px solid lightblue;">Edit Task Details</span></h3>
        </div>
        <div class="col s10">
            <%= if get_flash(@conn, :info) do %>
                <p class="info_message"><%= get_flash(@conn, :info) %></p>
            <% end %>
            <%= if get_flash(@conn, :error) do %>
                <p class="error_message"><%= get_flash(@conn, :error) %></p>
            <% end %>
        </div>
    </div>
</div>

<div class="col s12">
    <div>
        <%= form_for @changeset, Routes.task_path(@conn, :update_task, @task), fn f -> %>
            <div class="row">
                <div class="col s1">
                    <button type="submit" class="btn-floating btn-large waves-effect waves-light" style="float:right;margin-right:20px;">
                        <i class="material-icons tooltipped" data-position="right" data-tooltip="Save">save</i>
                    </button>
                </div>
                <div class="input-field col s5">
                    <i class="material-icons prefix">account_circle</i>
                    <%= text_input f, :taskname, id: "task-name", autofocus: true %>
                    <%= label f, :taskname, "Task Name", class: "active" %>
                </div>
                <div class="col s6"></div>
            </div>
            <div class="row">
                <div class="col s1">
                    <%= link to: Routes.task_path(@conn, :index), class: "btn-floating btn-large waves-effect waves-light red modal-trigger", style: "float:right;margin-right:20px;" do %>
                        <i class="material-icons tooltipped" data-position="right" data-tooltip="Cancel">arrow_back</i>
                    <% end %> 
                </div>
                <div class="input-field col s8">
                    <i class="material-icons prefix">business</i>
                    <%= textarea f, :task_description, [id: "task-description", class: "materialize-textarea"] %>
                    <%= label f, :description, "Task Description", class: "active" %>
                </div>
                <div class="col s3"></div>
            </div>
            <div class="row">
                <div class="col s1"></div>
                <div class="input-field col s4">
                    <i class="material-icons prefix">sort</i>
                    <%= select f, :priority, ["High": "High", "Medium": "Medium", "Low": "Low"], id: "task-priority" %>
                    <%= label f, :priority, "Task Priority", class: "active" %>
                </div>
                <div class="col s1"></div>
                <div class="input-field col s4">
                    <i class="material-icons prefix">sort</i>
                    <%= select f, :status, ["Active": "Active", "Backlog": "Backlog", "Completed": "Completed"], id: "task-status" %>
                    <%= label f, :status, "Task Status", class: "active" %>
                </div>
                <div class="col s2"></div>
            </div>
            <div class="row">
                <div class="col s1"></div>
                <div class="input-field col s4">
                    <i class="material-icons prefix">sort</i>
                    <%= text_input f, :deadline, [id: "deadline", class: "datepicker"] %>
                    <%= label f, :deadline, "Task Deadline", class: "active", for: "deadline" %>
                </div>
                <div class="col s7"></div>
            </div>
            <div class="row">
                <div class="col s4"></div>
                <div class="col s4"><hr style="border-top: 1px solid blue;" /></div>
                <div class="col s4"></div>
        <% end %>
    </div>
</div>

<div class="row">
    <div class="col s11 offset-s1">
        <div id="task-notes-block">
            <h4>
                <% note_count = Enum.count(@task.notes) %>
                <%= if note_count > 0 do %>
                    <span id="task-notes-button" class="btn btn-large waves-effect waves-light teal" data-state="hidden">
                <% else %>
                    <span id="task-notes-button" class="btn btn-large waves-effect waves-light teal" data-state="hidden" disabled>
                <% end %>
                    <i id="task-notes-button-icon" class="material-icons left">add_circle_outline</i>
                    Notes - <span id="task-notes-count" data-count="<%= note_count %>"><%= note_count %></span>
                </span>
            </h4>
        </div>
        <div id="task-notes" style="display:none;">
            <%= for note <- @task.notes do %>
                <div class="col s10 task-note-block task-note-id-<%= note.id %>" style="border:4px solid lightblue;padding:10px 15px 5px 15px;margin-bottom:10px;" data-note-id="<%= note.id %>">
                    <input type="text" class="col s10 task-edit-note" style="font-size:18px;border-bottom:none;" value="<%= note.note %>" disabled />
                    <span class="col s2 task-edit-icons-1">
                        <a href="#modal-delete-note" class="modal-trigger delete-note" data-id="<%= note.id %>"><i class="material-icons right delete-note" style="font-size:3rem;color:red;">delete</i></a>
                        <a href="#"><i class="material-icons right edit-note" style="font-size:3rem;color:teal;">mode_edit</i></a>
                    </span>
                    <span class="col s2 task-edit-icons-2" style="display:none;">
                        <a href="#"><i class="material-icons right cancel-edit-note" style="font-size:3rem;color:red;">cancel</i></a>
                        <a href="#"><i class="material-icons right save-edit-note" style="font-size:3rem;color:teal;">save</i></a>
                    </span>
                </div>
            <% end %>
        </div>
    </div>
</div>

<div id="modal-delete-note" class="modal">
    <div class="modal-content">
        <h4><span style="border-bottom: 2px solid lightblue;">Delete Note</span></h4>
        <p style="font-size:20px;font-weight:500;">Are you sure that you want to delete this Note ?</p>
        <input id="delete-note-id" type="hidden" value="">
    </div>
    <div class="modal-footer">
        <a href="#!" id="delete-note" class="modal-close waves-effect waves-green btn-flat" style="font-size:18px;">Delete</a>
        <a href="#!" class="modal-close waves-effect waves-green btn-flat" style="margin-left:15px;font-size:18px;">Cancel</a>
    </div>
</div>

<div id="modal-delete-task" class="modal">
    <div class="modal-content">
        <h4><span style="border-bottom: 2px solid lightblue;">Delete Task</span></h4>
        <p style="font-size:20px;font-weight:500;">Are you sure that you want to delete this tasks details ?</p>
    </div>
    <div class="modal-footer">
        <a href="#!" class="modal-close waves-effect waves-green btn-flat" style="font-size:18px;">Delete</a>
        <a href="#!" class="modal-close waves-effect waves-green btn-flat" style="margin-left:15px;font-size:18px;">Cancel</a>
    </div>
</div>

<script>
    $( document ).ready(function() {
        $('select').formSelect();
        $('.datepicker').datepicker({ format: 'yyyy-mm-dd' });
        $('.tooltipped').tooltip();
        $(".dropdown-trigger").dropdown();
        $('.fixed-action-btn').floatingActionButton();
        $('.modal').modal();
    });

    $('#task-notes-button').on('click', function(e) {
        e.preventDefault();

        var state = $('#task-notes-button').data('state');
        if (state == 'hidden') {
            $('#task-notes-button').data('state', 'visible');
            $('#task-notes-button-icon').text('remove_circle_outline');
            $('#task-notes').show();
            $("html, body").animate({ scrollTop: 500 }, "slow");
        }
        else {
            $('#task-notes-button').data('state', 'hidden');
            $('#task-notes-button-icon').text('add_circle_outline');
            $('#task-notes').hide(300);
            $("html, body").animate({ scrollTop: 0 }, "fast");
        }

        // reset colors / disabled etc.
        $('.task-note-block').css('border-color', 'lightblue');
        $('.task-edit-icons-2').hide();
        $('.task-edit-icons-1').show();
        $('.task-edit-note').attr('disabled', 'disabled');

        return false;
    });
    $('.edit-note').on('click', function(e){
        e.preventDefault();

        var el = $(this).closest('div');

        // reset colors / disabled etc.
        $('.task-note-block').css('border-color', 'lightblue');
        $('.task-edit-note').prop('disabled');

        // set the attributes for _this_
        $(el).css('border-color', 'blue');

        // set icons for the note being edited
        var note_icons_1 = $(el).find('.task-edit-icons-1');
        $(note_icons_1).hide();
        var note_icons_2 = $(el).find('.task-edit-icons-2');
        $(note_icons_2).show();

        // remove 'disabled' attribute from the input
        var note_input = $(el).find("input");
        $(note_input).removeAttr("disabled");
    });
    $('.cancel-edit-note').on('click', function(e) {
        e.preventDefault();

        // reset colors / disabled etc.
        $('.task-note-block').css('border-color', 'lightblue');
        $('.task-edit-note').attr('disabled','disabled');
        $('.task-edit-icons-2').hide();
        $('.task-edit-icons-1').show();
    });
    $('.delete-note').on('click', function(e) {
        e.preventDefault();

        var noteId = $(this).data('id');
        $('#delete-note-id').val(noteId);
    });
</script>

<script>
    $('.save-edit-note').on('click', function(e) {
        e.preventDefault;
        var CSRF_TOKEN = <%= raw Poison.encode!(Plug.CSRFProtection.get_csrf_token()) %>;

        var noteId = $(this).closest('.task-note-block').data('note-id');
        var note = $(this).closest('.task-note-block').find('.task-edit-note').val();

        $.ajax({
            method: "PUT",
            url: '/api/notes/' + noteId,
            data: {note: note, id: noteId},
            beforeSend: function(xhr) {
                xhr.setRequestHeader("X-CSRF-Token", CSRF_TOKEN);
            },
            success: function() {
                // reset colors / disabled etc.
                $('.task-note-block').css('border-color', 'lightblue');
                $('.task-edit-note').attr('disabled','disabled');
                $('.task-edit-icons-2').hide();
                $('.task-edit-icons-1').show();

                $('#task-notes-button').data('state', 'hidden');
                $('#task-notes-button-icon').text('add_circle_outline');
                $('#task-notes').hide(300);
                $("html, body").animate({ scrollTop: 0 }, "fast");
            },
            error: function() {
                console.log('I have failed an save note');
            }
        });
    });
</script>
<script>
    $('#delete-note').on('click', function(e) {
        e.preventDefault;
        var noteId = $('#delete-note-id').val();
        var CSRF_TOKEN = <%= raw Poison.encode!(Plug.CSRFProtection.get_csrf_token()) %>;

        var noteCount = $('#task-notes-count').data('count');
        var updatedNoteCount = noteCount - 1;

        $.ajax({
            method: "DELETE",
            url: '/api/notes/' + noteId,
            beforeSend: function(xhr) {
                xhr.setRequestHeader("X-CSRF-Token", CSRF_TOKEN);
            },
            success: function() {
                $('.task-note-id-' + noteId).remove();
                $('#task-notes-count').data('count',updatedNoteCount);
                $('#task-notes-count').text(updatedNoteCount);
            },
            error: function() {
                console.log('Note - delete failed : ');
            }
        });

    });
</script>